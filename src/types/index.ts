/**
 * Shared data models and type definitions for Popup MCP Extension
 */

/**
 * Represents incoming MCP requests from AI assistants to trigger popups
 */
export interface PopupRequest {
  /** Unique identifier generated by MCP Server for tracking */
  requestId: string;
  /** Path for routing to correct VS Code instance */
  workspacePath: string;
  /** Popup title */
  title: string;
  /** Main content message */
  message: string;
  /** Button choices for user interaction */
  options: Array<{ label: string; value: string }>;
}

/**
 * Captures user input from popup for routing back to AI
 */
export interface PopupResponse {
  /** Matches original request ID */
  requestId: string;
  /** Button value or custom text selected by user */
  selectedValue: string;
}

/**
 * Extension configuration settings
 */
export interface ExtensionConfig {
  /** Toggle for popup sound */
  chimeEnabled: boolean;
  /** Auto-dismiss time in seconds */
  popupTimeout: number;
  /** HTTP port for MCP server (0 = auto-assign) */
  httpPort: number;
  /** Enable stdio transport */
  enableStdio: boolean;
  /** Enable HTTP transport */
  enableHttp: boolean;
  /** Logging level */
  logLevel: 'debug' | 'info' | 'warn' | 'error';
}

/**
 * JSON-RPC 2.0 Request structure for MCP protocol
 */
export interface JSONRPCRequest {
  /** JSON-RPC version (always "2.0") */
  jsonrpc: '2.0';
  /** Method name (e.g., "triggerPopup") */
  method: string;
  /** Request parameters */
  params: {
    workspacePath: string;
    title: string;
    message: string;
    options: Array<{ label: string; value: string }>;
  };
  /** Request identifier */
  id: string;
}

/**
 * JSON-RPC 2.0 Response structure for MCP protocol
 */
export interface JSONRPCResponse {
  /** JSON-RPC version (always "2.0") */
  jsonrpc: '2.0';
  /** Response result (on success) */
  result?: {
    selectedValue?: string;
    status?: string;
  };
  /** Error details (on failure) */
  error?: {
    code: number;
    message: string;
    data?: any;
  };
  /** Request identifier (matches request) */
  id: string | null;
}

/**
 * MCP Server transport configuration
 */
export interface TransportConfig {
  /** HTTP server configuration */
  http?: {
    enabled: boolean;
    port: number;
    host: string;
  };
  /** Stdio transport configuration */
  stdio?: {
    enabled: boolean;
  };
}

/**
 * Server health status
 */
export interface ServerHealth {
  /** Overall server status */
  status: 'active' | 'inactive' | 'error';
  /** HTTP transport status */
  httpStatus?: 'listening' | 'error' | 'disabled';
  /** Stdio transport status */
  stdioStatus?: 'active' | 'error' | 'disabled';
  /** Server uptime in milliseconds */
  uptime?: number;
  /** Active connections count */
  activeConnections?: number;
  /** Last error message if any */
  lastError?: string;
}

/**
 * Custom error types for MCP operations
 */
export class MCPError extends Error {
  constructor(
    message: string,
    public code: number = -32000,
    public data?: any
  ) {
    super(message);
    this.name = 'MCPError';
  }
}

export class ValidationError extends MCPError {
  constructor(message: string, data?: any) {
    super(message, -32602, data);
    this.name = 'ValidationError';
  }
}

export class TransportError extends MCPError {
  constructor(message: string, data?: any) {
    super(message, -32001, data);
    this.name = 'TransportError';
  }
}
